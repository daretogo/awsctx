#!/usr/bin/env bash

set -eou pipefail

SELF_CMD="$0"
SELF_DIR="${HOME}/.awsctx"
AWS_CLI=aws
DEFAULT_PROFILE=default
CURRENT_PROFILE="${SELF_DIR}/current"

list_profiles() {
    $AWS_CLI configure list-profiles | sort -n
}

select_profile() {
  local choice
  choice="$(FZF_DEFAULT_COMMAND="${SELF_CMD}" fzf --ansi --no-preview || true)"
  if [[ -z "${choice}" ]]; then
    echo 2>&1 "error: you did not choose any of the options"
    exit 1
  else
    set_default_config "${choice}"
  fi
}

set_default_config() {
  local src_profile="${1}"
  local keys
  keys=('aws_access_key_id' 'aws_secret_access_key' 'aws_session_token' 'region' 'output')
  for key in "${keys[@]}"; do
    set_default_config_value "${src_profile}" "${key}"
  done
  write_current_profile_name "${src_profile}"
}

set_default_config_value() {
  local src_profile="$1"
  local key="$2"
  local value
  value=$($AWS_CLI configure get "${key}" --profile "${src_profile}") || true
  if [[ -n "${value}" ]]; then
    $AWS_CLI configure set "${key}" "${value}" --profile "${DEFAULT_PROFILE}"
  fi
}

write_current_profile_name() {
  local profile_name="$1"
  mkdir -p "${SELF_DIR}"
  echo -n "${profile_name}" > "${CURRENT_PROFILE}"
}

get_current_profile_name() {
  if [[ -f "${CURRENT_PROFILE}" ]]; then
    cat "${CURRENT_PROFILE}"
  else
    echo 2>&1 "error: no profile set via $(basename "${SELF_CMD}")"
    exit 1
  fi
}

main() {
  if [[ "$#" -eq 0 ]]; then
    if [[ -t 1 && "$(type fzf &>/dev/null; echo $?)" -eq 0 ]]; then
      select_profile
    else
      list_profiles
    fi
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many arguments" >&2
    exit 1
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-c' || "${1}" == '--current' ]]; then
      get_current_profile_name
    else
      set_default_config "${1}"
    fi
  else
    echo "Usage: $0 [profile]"
    exit 1
  fi
}

main "$@"