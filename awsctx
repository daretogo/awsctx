#!/usr/bin/env bash

set -eou pipefail

SELF_CMD="$0"
SELF_DIR="${HOME}/.awsctx"
AWS_CLI=aws
DEFAULT_PROFILE=default
CURRENT_PROFILE="${SELF_DIR}/current"
PREVIOUS_PROFILE="${SELF_DIR}/previous"

usage() {
  local SELF
  SELF=$(basename "${SELF_CMD}")

  cat <<EOF
Usage:
  $SELF                       : list the profiles
  $SELF <NAME>                : switch to profile <NAME>
  $SELF -                     : switch to the previous profile
  $SELF -c, --current         : show the current profile name
  $SELF -r, --reload          : reload current profile config (e.g. when credentials expired)
  $SELF -h, --help            : show this message
EOF
}

list_profiles() {
    $AWS_CLI configure list-profiles | sort -n
}

select_profile() {
  local choice
  choice="$(FZF_DEFAULT_COMMAND="${SELF_CMD}" fzf --ansi --no-preview || true)"
  if [[ -z "${choice}" ]]; then
    echo 2>&1 "error: you did not choose any of the options"
    exit 1
  fi

  save_previous_profile
  set_profile "${choice}"
  write_profile "${choice}" "${CURRENT_PROFILE}"
}

set_profile() {
  local profile="${1}"
  echo "Setting profile to: ${profile}"  # Debug statement

  set_default_config_value "${profile}" "sso_session"
  set_default_config_value "${profile}" "sso_account_id"
  set_default_config_value "${profile}" "sso_role_name"
  set_default_config_value "${profile}" "region"
}

set_default_config_value() {
  local src_profile="$1"
  local key="$2"
  local value
  value=$($AWS_CLI configure get "${key}" --profile "${src_profile}") || true
  echo "Setting ${key} for ${DEFAULT_PROFILE} to ${value}"  # Debug statement
  if [[ -n "${value}" ]]; then
    $AWS_CLI configure set "${key}" "${value}" --profile "${DEFAULT_PROFILE}"
  fi
}

write_profile() {
  local profile="$1"
  local dest="$2"
  mkdir -p "$(dirname "${dest}")"
  echo -n "${profile}" > "${dest}"
}

read_profile() {
  local src="$1"
  local profile
  if [[ -f "${src}" ]]; then
    profile="$(cat "${src}")"
  else
    profile=""
  fi
  echo -n "${profile}"
}

save_previous_profile() {
  local profile
  profile="$(read_profile "${CURRENT_PROFILE}")"
  if [[ -n "${profile}" ]]; then
    write_profile "${profile}" "${PREVIOUS_PROFILE}"
  fi
}

restore_previous_profile() {
  local profile
  profile="$(read_profile "${PREVIOUS_PROFILE}")"
  if [[ -n "${profile}" ]]; then
    set_profile "${profile}"
  fi
}

get_profile() {
  local profile
  profile="$(read_profile "${CURRENT_PROFILE}")"
  if [[ -n "${profile}" ]]; then
    echo -n "${profile}"
  fi
}

main() {
  if [[ "$#" -eq 0 ]]; then
    if [[ -t 1 && "$(type fzf &>/dev/null; echo $?)" -eq 0 ]]; then
      select_profile
    else
      list_profiles
    fi
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == "-" ]]; then
      restore_previous_profile
    elif [[ "${1}" == '-c' || "${1}" == '--current' ]]; then
      get_profile
    elif [[ "${1}" == '-r' || "${1}" == '--reload' ]]; then
      set_profile "$(get_profile)"
    elif [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    else
      set_profile "${1}"
    fi
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many arguments" >&2
    usage
    exit 1
  else
    usage
    exit 1
  fi
}

main "$@"
